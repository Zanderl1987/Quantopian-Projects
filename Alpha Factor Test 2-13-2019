import numpy as np
import quantopian.algorithm as algo
import quantopian.optimize as opt
from quantopian.pipeline import Pipeline
from quantopian.pipeline.filters import QTradableStocksUS
from quantopian.pipeline.data import factset

from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.factors import RSI
from quantopian.pipeline.factors import ExponentialWeightedMovingAverage
from quantopian.pipeline.factors import ExponentialWeightedMovingStdDev
from quantopian.pipeline.factors import BollingerBands
# from sklearn.ensemble import AdaBoostClassifier
# from sklearn.ensemble import RandomForestClassifier

ZSCORE_FILTER = 3 # Maximum number of standard deviations to include before counting as outliers
ZERO_FILTER = 0.001 # Minimum weight we allow before dropping security
        

def initialize(context):
    
    # context.lookback = 5
    # context.history_range = 504
    # n_estimator_value = 10
    # rng = np.random.RandomState(1)
    
    # context.model_ABC_RFC = AdaBoostClassifier(RandomForestClassifier(min_samples_split=2,min_samples_leaf=1),n_estimators=n_estimators_value,
    #                                            learning_rate=0.1,algorithm='SAMME')
    
    algo.attach_pipeline(make_pipeline(), 'alpha_factor_template')

    # Schedule our rebalance function
    algo.schedule_function(func=rebalance,
                           date_rule=algo.date_rules.week_start(),
                           time_rule=algo.time_rules.market_open(),
                           half_days=True)

    # Record our portfolio variables at the end of day
    algo.schedule_function(func=record_vars,
                           date_rule=algo.date_rules.every_day(),
                           time_rule=algo.time_rules.market_close(),
                           half_days=True)


def make_pipeline():
    # Setting up the variables
    #alpha_factor = (factset.Fundamentals.roe_qf.latest)
    rsi_factor_13 = RSI(
        inputs=[USEquityPricing.close],window_length=13)
    
    rsi_factor_30 = RSI(
        inputs=[USEquityPricing.close],window_length=30)
    
    rsi_factor_63 = RSI(
        inputs=[USEquityPricing.close],window_length=63)
    
    ema_factor_5 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=5,decay_rate=15.0)
    
    ema_factor_13 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=13,decay_rate=15.0)
    
    ema_factor_30 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=30,decay_rate=15.0)
    
    ema_factor_63 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=63,decay_rate=15.0)
    
    ema_factor_126 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=126,decay_rate=15.0)
    
    ema_factor_252 = ExponentialWeightedMovingAverage(
        inputs=[USEquityPricing.close],
        window_length=252,decay_rate=15.0)
    
    ema_stddev_5 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=5,decay_rate=15.0)
    
    ema_stddev_13 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=13,decay_rate=15.0)
    
    ema_stddev_20 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=20,decay_rate=15.0)
    
    ema_stddev_30 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=30,decay_rate=15.0)
    
    ema_stddev_63 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=63,decay_rate=15.0)
    
    ema_stddev_126 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=126,decay_rate=15.0)
    
    ema_stddev_252 = ExponentialWeightedMovingStdDev(inputs=[USEquityPricing.close],window_length=252,decay_rate=15.0)
    
    
    bbands_20 = BollingerBands(inputs=[USEquityPricing.close],window_length=20,k=2)
    
    alpha_factor = (ema_factor_63 - ema_factor_126)
    
    print(bbands_20)

    # Standardized logic for each input factor after this point
    alpha_w = alpha_factor.winsorize(min_percentile=0.001,
                                     max_percentile=0.03,
                                     mask=QTradableStocksUS() & alpha_factor.isfinite())

    alpha_z = alpha_w.zscore()
    alpha_weight = alpha_z / 100.0

    outlier_filter = alpha_z.abs() < 6
    zero_filter = alpha_weight.abs() > 0.001

    universe = QTradableStocksUS() & \
               outlier_filter & \
               zero_filter

    pipe = Pipeline(
        columns={
            'alpha_weight': alpha_weight
        },
        screen=universe
    )
    return pipe


def before_trading_start(context, data):
    context.pipeline_data = algo.pipeline_output('alpha_factor_template')


def record_vars(context, data):
    # Plot the number of positions over time.
    algo.record(num_positions=len(context.portfolio.positions))
    algo.record(leverage=context.account.leverage)

    
def rebalance(context, data):
    # Retrieve pipeline output
    pipeline_data = context.pipeline_data
    
    alpha_weight = pipeline_data['alpha_weight']
    alpha_weight_norm = alpha_weight / alpha_weight.abs().sum()


    objective = opt.TargetWeights(alpha_weight_norm)

    # No constraints, want all assets allocated to
    constraints = []
    
    algo.order_optimal_portfolio(
        objective=objective,
        constraints=constraints
    )
